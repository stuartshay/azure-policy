name: Terraform Apply

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Terraform module to deploy'
        required: true
        type: choice
        options:
          - infrastructure
          - policies
          - functions
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm:
        description: 'Type "apply" to confirm deployment'
        required: true
        type: string

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  # Use existing workspace names that match Terraform configuration
  TF_WORKSPACE: azure-policy-${{ github.event.inputs.module }}
  # Terraform variables
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_location: ${{ secrets.AZURE_LOCATION || 'East US' }}
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  TF_VAR_owner: platform-team
  TF_VAR_cost_center: development

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-latest
    steps:
      - name: Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirm }}" != "apply" ]; then
            echo "❌ Confirmation failed. You must type 'apply' to proceed."
            exit 1
          fi
          echo "✅ Confirmation validated"

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "exitcode=$?" >> "$GITHUB_OUTPUT"
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.event.inputs.module }}-${{ github.event.inputs.environment }}
          path: infrastructure/${{ github.event.inputs.module }}/tfplan
          retention-days: 30

      - name: Terraform Apply
        id: apply
        if: steps.plan.outputs.exitcode == 2
        run: |
          terraform apply tfplan
          echo "applied=true" >> "$GITHUB_OUTPUT"
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: No Changes Detected
        if: steps.plan.outputs.exitcode == 0
        run: |
          echo "✅ No changes detected - ${{ github.event.inputs.module }} module is up to date"
          {
            echo "## 📋 Terraform Plan Result"
            echo ""
            echo "**Status:** No changes detected"
            echo "**Module:** ${{ github.event.inputs.module }}"
            echo "**Environment:** ${{ github.event.inputs.environment }}"
            echo "**Location:** ${{ env.TF_VAR_location }}"
            echo ""
            echo "The current infrastructure matches the desired state. No resources need to be created, modified, or destroyed."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Debug Plan and Apply Status
        run: |
          echo "🔍 Debugging workflow state:"
          echo "Module: ${{ github.event.inputs.module }}"
          echo "Plan exitcode: ${{ steps.plan.outputs.exitcode }}"
          echo "Apply applied: ${{ steps.apply.outputs.applied }}"
          echo "Working directory: $(pwd)"
          echo "Terraform state files:"
          ls -la terraform.tfstate* 2>/dev/null || echo "No state files found"
          echo "Available outputs:"
          terraform output 2>&1 || echo "No outputs available"
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Get Terraform Outputs
        id: outputs
        if: steps.plan.outputs.exitcode == 0 || (steps.plan.outputs.exitcode == 2 && steps.apply.outputs.applied == 'true')
        run: |
          # Check if outputs exist before trying to read them
          {
            echo "outputs_available=false"
          } >> "$GITHUB_OUTPUT"

          # Try to get common outputs based on module type
          case "${{ github.event.inputs.module }}" in
            "infrastructure")
              if terraform output resource_group_name >/dev/null 2>&1; then
                {
                  echo "resource_group_name=$(terraform output -raw resource_group_name)"
                  echo "vnet_name=$(terraform output -raw vnet_name)"
                  echo "outputs_available=true"
                } >> "$GITHUB_OUTPUT"
              fi
              ;;
            "functions")
              if terraform output function_app_name >/dev/null 2>&1; then
                {
                  echo "function_app_name=$(terraform output -raw function_app_name)"
                  echo "app_service_plan_name=$(terraform output -raw app_service_plan_name)"
                  echo "outputs_available=true"
                } >> "$GITHUB_OUTPUT"
              fi
              ;;
            "policies")
              if terraform output policy_set_id >/dev/null 2>&1; then
                {
                  echo "policy_set_id=$(terraform output -raw policy_set_id)"
                  echo "outputs_available=true"
                } >> "$GITHUB_OUTPUT"
              fi
              ;;
          esac
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Generate Deployment Summary
        if: steps.apply.outputs.applied == 'true' || steps.plan.outputs.exitcode == 0
        run: |
          if [ "${{ steps.apply.outputs.applied }}" == "true" ]; then
            {
              echo "## 🚀 Deployment Summary"
              echo ""
              echo "### Environment Details"
              echo "- **Module:** ${{ github.event.inputs.module }}"
              echo "- **Environment:** ${{ github.event.inputs.environment }}"
              echo "- **Location:** ${{ env.TF_VAR_location }}"
              echo "- **Triggered by:** ${{ github.actor }}"
              echo "- **Timestamp:** $(date)"
              echo "- **Status:** ✅ ${{ github.event.inputs.module }} module deployed successfully"
              echo ""
            } >> "$GITHUB_STEP_SUMMARY"

            # Get outputs if available
            case "${{ github.event.inputs.module }}" in
              "infrastructure")
                if terraform output resource_group_name >/dev/null 2>&1; then
                  {
                    echo "### Deployed Resources"
                    echo "- **Resource Group:** $(terraform output -raw resource_group_name)"
                    echo "- **Virtual Network:** $(terraform output -raw vnet_name)"
                  } >> "$GITHUB_STEP_SUMMARY"
                fi
                ;;
              "functions")
                if terraform output function_app_name >/dev/null 2>&1; then
                  {
                    echo "### Deployed Resources"
                    echo "- **Function App:** $(terraform output -raw function_app_name)"
                    echo "- **App Service Plan:** $(terraform output -raw app_service_plan_name)"
                  } >> "$GITHUB_STEP_SUMMARY"
                fi
                ;;
              "policies")
                if terraform output policy_set_id >/dev/null 2>&1; then
                  {
                    echo "### Deployed Resources"
                    echo "- **Policy Set:** $(terraform output -raw policy_set_id)"
                  } >> "$GITHUB_STEP_SUMMARY"
                fi
                ;;
            esac
          else
            {
              echo "## 📋 Infrastructure Status"
              echo ""
              echo "### Environment Details"
              echo "- **Module:** ${{ github.event.inputs.module }}"
              echo "- **Environment:** ${{ github.event.inputs.environment }}"
              echo "- **Location:** ${{ env.TF_VAR_location }}"
              echo "- **Triggered by:** ${{ github.actor }}"
              echo "- **Timestamp:** $(date)"
              echo "- **Status:** ✅ No changes needed - ${{ github.event.inputs.module }} module is up to date"
            } >> "$GITHUB_STEP_SUMMARY"
          fi
          {
            echo ""
            echo "### Next Steps"
            echo "1. Verify resources in Azure Portal"
            echo "2. Test deployed services"
            echo "3. Configure monitoring alerts"
            echo "4. Review cost management dashboard"
          } >> "$GITHUB_STEP_SUMMARY"
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Create Success Issue
        if: steps.apply.outputs.applied == 'true' || steps.plan.outputs.exitcode == 0
        uses: actions/github-script@v7
        with:
          script: |
            const wasDeployed = '${{ steps.apply.outputs.applied }}' === 'true';
            const title = wasDeployed
              ? `✅ ${{ github.event.inputs.module }} Module Deployed - ${{ github.event.inputs.environment }}`
              : `✅ ${{ github.event.inputs.module }} Module Verified - ${{ github.event.inputs.environment }}`;

            const deploymentStatus = wasDeployed
              ? '${{ github.event.inputs.module }} Module Deployment Successful'
              : '${{ github.event.inputs.module }} Module Status Verified - No Changes Needed';

            const body = `
            ## ${deploymentStatus}

            **Module:** ${{ github.event.inputs.module }}
            **Environment:** ${{ github.event.inputs.environment }}
            **${wasDeployed ? 'Deployed' : 'Verified'} by:** ${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}

            ### ${wasDeployed ? 'Post-Deployment' : 'Recommended'} Tasks
            - [ ] Verify all resources are running
            - [ ] Test deployed services
            - [ ] Configure monitoring
            - [ ] Review security settings

            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', wasDeployed ? 'deployment' : 'verification', 'success', '${{ github.event.inputs.module }}', '${{ github.event.inputs.environment }}']
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `❌ ${{ github.event.inputs.module }} Module Deployment Failed - ${{ github.event.inputs.environment }}`;
            const body = `
            ## Infrastructure Deployment Failed

            **Module:** ${{ github.event.inputs.module }}
            **Environment:** ${{ github.event.inputs.environment }}
            **Triggered by:** ${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}

            ### Failure Details
            Please check the workflow logs for detailed error information.

            ### Troubleshooting Steps
            1. Check Azure service health
            2. Verify Azure credentials and permissions
            3. Review Terraform configuration
            4. Check for resource naming conflicts
            5. Validate network configuration

            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'deployment', 'failure', '${{ github.event.inputs.module }}', '${{ github.event.inputs.environment }}']
            });

      - name: Cleanup on Failure
        if: failure()
        run: |
          echo "Deployment failed. Consider running terraform destroy if partial resources were created."
          echo "Use the terraform-destroy workflow with module: ${{ github.event.inputs.module }} and environment: ${{ github.event.inputs.environment }}"
