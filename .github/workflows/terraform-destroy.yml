name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      module:
        description: 'Terraform module to destroy'
        required: true
        type: choice
        default: app-service
        options:
          - core
          - policies
          - app-service
          - functions-app
          - monitoring
          - terraform
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - dev
          - staging
      confirm_destroy:
        description: 'Type "destroy" to confirm'
        required: true
        type: string
      double_confirm:
        description: 'Type environment name again'
        required: true
        type: string

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  # Use existing workspace names that match Terraform configuration
  # Map modules to their actual Terraform Cloud workspace names
  TF_WORKSPACE: ${{
    github.event.inputs.module == 'functions-app' && 'azure-policy-functions-app' ||
    github.event.inputs.module == 'app-service' && 'app-service-dev' ||
    github.event.inputs.module == 'terraform' && 'azure-policy-infrastructure' ||
    format('azure-policy-{0}', github.event.inputs.module) }}
  # Terraform variables
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  TF_VAR_location: ${{ secrets.AZURE_LOCATION || 'East US' }}
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  TF_VAR_owner: platform-team
  TF_VAR_cost_center: development

jobs:
  validate-destroy:
    name: Validate Destroy Request
    runs-on: ubuntu-latest
    steps:
      - name: Validate Confirmations
        run: |
          if [ "${{ github.event.inputs.confirm_destroy }}" != "destroy" ]; then
            echo "‚ùå First confirmation failed. You must type 'destroy'."
            exit 1
          fi

          if [ "${{ github.event.inputs.double_confirm }}" != "${{ github.event.inputs.environment }}" ]; then
            echo "‚ùå Second confirmation failed. You must type the environment name."
            exit 1
          fi

          if [ "${{ github.event.inputs.environment }}" == "prod" ]; then
            echo "‚ùå Production environment cannot be destroyed via workflow."
            exit 1
          fi

          echo "‚úÖ All confirmations validated"

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: validate-destroy
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        run: terraform init
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Terraform Plan Destroy
        id: plan
        run: |
          terraform plan -destroy -detailed-exitcode -out=destroy-plan
          echo "exitcode=$?" >> "$GITHUB_OUTPUT"
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Upload Destroy Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-destroy-plan-${{ github.event.inputs.module }}-${{ github.event.inputs.environment }}
          path: infrastructure/${{ github.event.inputs.module }}/destroy-plan
          retention-days: 7

      - name: Terraform Destroy
        if: steps.plan.outputs.exitcode == 2
        run: terraform apply destroy-plan
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Verify Destruction (via Terraform State)
        run: |
          echo "Verifying destruction..."
          # Check if terraform state is empty or contains no resources
          terraform show -no-color | head -20 || echo "No resources found in state"
          echo ""
          echo "‚úÖ Destruction verification complete"
          echo "If you need to verify in Azure Portal, check that the resource group no longer exists."
        working-directory: infrastructure/${{ github.event.inputs.module }}

      - name: Generate Destruction Summary
        if: success()
        run: |
          {
            echo "## üóëÔ∏è Infrastructure Destruction Summary"
            echo ""
            echo "### Environment Details"
            echo "- **Module:** ${{ github.event.inputs.module }}"
            echo "- **Environment:** ${{ github.event.inputs.environment }}"
            echo "- **Destroyed by:** ${{ github.actor }}"
            echo "- **Timestamp:** $(date)"
            echo ""
            echo "### Cleanup Status"
            echo "- **Status:** ‚úÖ ${{ github.event.inputs.module }} module destroyed"
          } >> "$GITHUB_STEP_SUMMARY"

          # Module-specific cleanup status
          case "${{ github.event.inputs.module }}" in
            "core")
              {
                echo "- **Resource Group:** Removed"
                echo "- **Virtual Network:** Removed"
                echo "- **Network Security Groups:** Removed"
                echo "- **Storage Accounts:** Removed"
              } >> "$GITHUB_STEP_SUMMARY"
              ;;
            "functions-app")
              {
                echo "- **Function Apps:** Removed"
                echo "- **App Service Plan:** Removed"
                echo "- **Application Insights:** Removed"
              } >> "$GITHUB_STEP_SUMMARY"
              ;;
            "policies")
              {
                echo "- **Azure Policies:** Removed"
                echo "- **Policy Assignments:** Removed"
                echo "- **Policy Initiatives:** Removed"
              } >> "$GITHUB_STEP_SUMMARY"
              ;;
            "monitoring")
              {
                echo "- **Application Insights:** Removed"
                echo "- **Log Analytics Workspace:** Removed"
                echo "- **Monitoring Workbooks:** Removed"
              } >> "$GITHUB_STEP_SUMMARY"
              ;;
          esac

          {
            echo ""
            echo "### Post-Destruction Tasks"
            echo "1. Verify no orphaned resources in Azure Portal"
            echo "2. Check for any remaining costs"
            echo "3. Review backup retention policies"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Create Destruction Issue
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `üóëÔ∏è ${{ github.event.inputs.module }} Module Destroyed - ${{ github.event.inputs.environment }}`;
            const body = `
            ## Infrastructure Destruction Completed

            **Module:** ${{ github.event.inputs.module }}
            **Environment:** ${{ github.event.inputs.environment }}
            **Destroyed by:** ${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}

            ### Destruction Summary
            All resources for the ${{ github.event.inputs.module }} module in the ${{ github.event.inputs.environment }} environment have been successfully destroyed.

            ### Post-Destruction Checklist
            - [ ] Verify no orphaned resources in Azure Portal
            - [ ] Check Azure billing for any remaining costs
            - [ ] Review backup retention policies
            - [ ] Update documentation if needed
            - [ ] Close related infrastructure issues

            ### Resources Destroyed
            Module: ${{ github.event.inputs.module }}
            Environment: ${{ github.event.inputs.environment }}

            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'destruction', 'cleanup', '${{ github.event.inputs.module }}', '${{ github.event.inputs.environment }}']
            });

      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = `‚ùå ${{ github.event.inputs.module }} Module Destruction Failed - ${{ github.event.inputs.environment }}`;
            const body = `
            ## Infrastructure Destruction Failed

            **Module:** ${{ github.event.inputs.module }}
            **Environment:** ${{ github.event.inputs.environment }}
            **Triggered by:** ${{ github.actor }}
            **Timestamp:** ${new Date().toISOString()}

            ### Failure Details
            The infrastructure destruction process failed. Please check the workflow logs for detailed error information.

            ### Manual Cleanup Required
            You may need to manually clean up resources in the Azure Portal for the ${{ github.event.inputs.module }} module.

            ### Troubleshooting Steps
            1. Check for resource locks
            2. Verify deletion permissions
            3. Look for dependencies preventing deletion
            4. Check for backup policies preventing deletion
            5. Review Azure service health

            **Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['infrastructure', 'destruction', 'failure', '${{ github.event.inputs.module }}', '${{ github.event.inputs.environment }}']
            });
