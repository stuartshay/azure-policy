# Azure Policy & Functions Pre-commit Configuration
# This file configures pre-commit hooks to maintain code quality and consistency

repos:
  # General file formatting and checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: trailing-whitespace
        exclude: '\.md$'
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--allow-multiple-documents']
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-case-conflict
      - id: check-merge-conflict
      - id: debug-statements
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']

  # Python formatting and linting
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3
        args: ['--line-length=88']

  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: ['--settings-path=.isort.cfg']

  - repo: https://github.com/pycqa/autoflake
    rev: v2.3.1
    hooks:
      - id: autoflake
        args:
          [
            '--in-place',
            '--remove-all-unused-imports',
            '--remove-unused-variables',
            '--remove-duplicate-keys',
            '--ignore-init-module-imports',
            '--recursive',
            '--expand-star-imports',
            '--ignore-pass-statements',
          ]
        exclude: '^(.*/__pycache__/|\.venv/|venv/|migrations/|site-packages/|azurite-data/|.*test.*\.py$|tests/.*\.py$)'
        language_version: python3

  - repo: https://github.com/pycqa/flake8
    rev: 7.3.0
    hooks:
      - id: flake8
        args: ['--max-line-length=120', '--extend-ignore=E203,W503,F401,F841']

  - repo: https://github.com/pycqa/pylint
    rev: v3.3.8
    hooks:
      - id: pylint
        args: ['--rcfile=.pylintrc']
        exclude: '^(.*test.*\.py$|tests/.*\.py$|.*/__pycache__/|\.venv/|venv/|migrations/|site-packages/|azurite-data/|.*\.ipynb$)'
        additional_dependencies:
          - azure-functions==1.23.0
          - azure-storage-blob==12.26.0
          - azure-identity==1.24.0
          - azure-keyvault-secrets==4.10.0
          - azure-servicebus==7.14.2
          - azure-mgmt-resource==23.0.0
          - azure-mgmt-servicebus==9.0.0
          - aiohttp==3.12.15
          - python-dotenv==1.1.1
          - requests==2.32.4
          - pydantic==2.11.7

  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.17.1
    hooks:
      - id: mypy
        args: ['--config-file=mypy.ini', '--disable-error-code=misc']
        exclude: '.*test.*\.py$|tests/.*\.py$|functions/common/.*\.py$'
        additional_dependencies:
          - types-requests
          - types-PyYAML
          - types-tabulate

  - repo: https://github.com/RobertCraigie/pyright-python
    rev: v1.1.404
    hooks:
      - id: pyright
        args: ['--project', 'pyrightconfig.json']
        additional_dependencies:
          - types-requests==2.32.0.20241016
          - pydantic==2.11.7
          - requests==2.32.4
          - azure-functions==1.23.0
          - azure-storage-blob==12.26.0
          - azure-identity==1.24.0
          - azure-keyvault-secrets==4.10.0
          - azure-servicebus==7.14.2
          - azure-mgmt-resource==23.0.0
          - azure-mgmt-servicebus==9.0.0
          - aiohttp==3.12.15
          - python-dotenv==1.1.1
          - pytest==8.3.4

  # Jupyter notebook output clearing
  - repo: https://github.com/kynan/nbstripout
    rev: 0.8.1
    hooks:
      - id: nbstripout
        files: '.ipynb$'

  # Jupyter notebook linting
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.9.1
    hooks:
      - id: nbqa-black
        args: ['--line-length=88']
      - id: nbqa-isort
        args: ['--profile=black', '--filter-files']
      - id: nbqa-flake8
        args:
          [
            '--extend-ignore=E203,E501,F401,F541,W293,C901,F821,E226,E741,C401,F811,Q000,D100',
            '--max-line-length=120',
          ]
        additional_dependencies:
          - flake8-docstrings
          - flake8-comprehensions

  # PowerShell formatting and linting
  - repo: local
    hooks:
      - id: powershell-format
        name: PowerShell Formatter
        entry: bash
        args:
          [
            '-c',
            'for file in "$@"; do echo "Analyzing $file"; if command -v pwsh >/dev/null 2>&1; then pwsh -Command "if (Get-Module -ListAvailable PSScriptAnalyzer) { \$result = Invoke-ScriptAnalyzer -Path \"$file\" -Settings PSGallery; if (\$result) { \$result | Format-Table; exit 1 } } else { Write-Host \"PSScriptAnalyzer not available, skipping PowerShell analysis\" }"; else echo "PowerShell not available, skipping analysis"; fi; done',
            '--',
          ]
        language: system
        files: '\.ps1$'
        pass_filenames: true

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.11.0.1
    hooks:
      - id: shellcheck
        args: ['--severity=warning']
        exclude: '\.zshrc$'

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        exclude: ^(\.secrets\.(baseline|yaml|allowlist)$|.*local\.settings\.json.*$|\.github/workflows/.*\.yml$) # Documentation and markdown
  # - repo: https://github.com/igorshubovych/markdownlint-cli
  #   rev: v0.42.0
  #   hooks:
  #     - id: markdownlint
  #       args: ['--fix']
  #       exclude: 'CHANGELOG\.md$'

  # Azure specific validations
  - repo: local
    hooks:
      - id: docs-folder-enforcement
        name: Enforce Documentation Structure
        entry: bash
        args:
          [
            '-c',
            'for file in "$@"; do if [[ "$file" =~ \.md$ ]] && [[ ! "$file" =~ ^docs/ ]] && [[ ! "$file" =~ ^README\.md$ ]] && [[ ! "$file" =~ ^CHANGELOG\.md$ ]] && [[ ! "$file" =~ ^CONTRIBUTING\.md$ ]] && [[ ! "$file" =~ ^LICENSE\.md$ ]] && [[ ! "$file" =~ ^\.cline/ ]] && [[ ! "$file" =~ ^\.github/copilot_instructions\.md$ ]] && [[ ! "$file" =~ ^\.github/chatmodes/ ]] && [[ ! "$file" =~ /site-packages/ ]] && [[ ! "$file" =~ /\.venv/ ]] && [[ ! "$file" =~ modules/.*README\.md$ ]] && [[ ! "$file" =~ infrastructure/.*/README\.md$ ]] && [[ ! "$file" =~ functions/.*/README\.md$ ]]; then echo "❌ Markdown file $file should be in docs/ folder. Please move it: mv $file docs/$(basename $file)"; exit 1; fi; done',
            '--',
          ]
        language: system
        files: '\.md$'
        pass_filenames: true

      - id: functions-readme-enforcement
        name: Enforce README.md in Function Directories
        entry: bash
        args:
          [
            '-c',
            'for dir in functions/*/; do if [[ -d "$dir" ]] && [[ ! -f "$dir/README.md" ]]; then echo "❌ Function directory $dir is missing README.md file. All function directories must have documentation."; exit 1; fi; done',
          ]
        language: system
        files: '^functions/'
        pass_filenames: false
        always_run: true

      - id: azure-policy-validation
        name: Azure Policy JSON Validation
        entry: bash
        args:
          [
            '-c',
            'for file in "$@"; do if ! jq empty "$file" 2>/dev/null; then echo "Invalid JSON in $file"; exit 1; fi; done',
            '--',
          ]
        language: system
        files: 'policies/.*\.json$'
        pass_filenames: true

      - id: bicep-validation
        name: Bicep Template Validation
        entry: bash
        args:
          [
            '-c',
            'if command -v az >/dev/null 2>&1; then for file in "$@"; do az bicep build --file "$file" --stdout >/dev/null || exit 1; done; else echo "Azure CLI not available, skipping Bicep validation"; fi',
            '--',
          ]
        language: system
        files: '\.bicep$'
        pass_filenames: true

  # Terraform formatting and validation
  - repo: https://github.com/antonbabenko/pre-commit-terraform
    rev: v1.100.0
    hooks:
      - id: terraform_fmt
      - id: terraform_validate
      - id: terraform_docs
        args:
          - --hook-config=--path-to-file=README.md
          - --hook-config=--add-to-existing-file=true
          - --hook-config=--create-file-if-not-exist=true
        files: ^infrastructure/.*\.tf$
      - id: terraform_tflint
        args:
          - --args=--only=terraform_deprecated_interpolation
          - --args=--only=terraform_deprecated_index
          - --args=--only=terraform_unused_declarations
          - --args=--only=terraform_comment_syntax
          - --args=--only=terraform_documented_outputs
          - --args=--only=terraform_documented_variables
          - --args=--only=terraform_typed_variables
          - --args=--only=terraform_module_pinned_source
          - --args=--only=terraform_naming_convention
          - --args=--only=terraform_required_version
          - --args=--only=terraform_required_providers
          - --args=--only=terraform_standard_module_structure
      - id: terraform_checkov
        args:
          - --args=--framework=terraform
          - --args=--config-file=${PWD}/.checkov.yaml

  # GitHub Actions linting
  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7 # Use the latest version
    hooks:
      - id: actionlint
        args:
          - '-config-file'
          - 'actionlint.yaml'

  # Security and dependency scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.6
    hooks:
      - id: bandit
        args:
          [
            '--exclude',
            '*/.*,*/.venv/*,*/venv/*,*/__pycache__/*,*/site-packages/*,*/tests/*',
          ]
        files: '^functions/basic/function_app\.py$'

# Configuration for specific hooks
default_language_version:
  python: python3.13
