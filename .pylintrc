[MASTER]
# Use multiple processes to speed up Pylint
jobs = 0

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook=

# Add files or directories matching the regex patterns to the ignore-list.
# The regex matches against paths and can be in Posix or Windows format.
ignore-paths = ^(.*test.*\.py|tests/.*\.py|.*/__pycache__/|\.venv/|venv/|migrations/|site-packages/|azurite-data/|.*\.ipynb)$

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins =

# Pickle collected data for later comparisons.
persistent = yes

# Minimum Python version to use for version dependent checks. Will default to
# the version used to run pylint.
py-version = 3.13

[MESSAGES CONTROL]
# Disable specific warnings and errors
disable =
    # Documentation related
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    # Style related
    invalid-name,
    too-few-public-methods,
    too-many-arguments,
    unused-argument,
    import-outside-toplevel,
    duplicate-code,
    # Azure Functions specific
    unused-import,
    broad-exception-caught,
    broad-exception-raised,
    # Type checking (handled by mypy)
    import-error,
    no-member,
    # Jupyter notebooks
    pointless-string-statement,
    # Additional relaxed rules for Azure Functions
    global-statement,
    logging-fstring-interpolation,
    wrong-import-position,
    unused-variable,
    pointless-statement,
    logging-too-many-args

[REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format = colorized

# Tells whether to display a full report or only the messages
reports = no

# Activate the evaluation score.
score = yes

[REFACTORING]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

[BASIC]
# Good variable names which should always be accepted, separated by a comma
good-names = i,j,k,ex,Run,_,id,pk,db,app,req,msg,url,ctx,env,key,val,obj,cls,func

# Regular expression matching correct function names
function-rgx = [a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct variable names
variable-rgx = [a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct constant names
const-rgx = (([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct attribute names
attr-rgx = [a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct argument names
argument-rgx = [a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class attribute names
class-attribute-rgx = ([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression matching correct method names
method-rgx = [a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct module names
module-rgx = (([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

[FORMAT]
# Maximum number of characters on a single line.
max-line-length = 120

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = ^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = no

[LOGGING]
# Format style used to check logging format string. `old` means using %
# formatting, while `new` is for `{}` formatting.
logging-format-style = new

[MISCELLANEOUS]
# List of note tags to take in consideration, separated by a comma.
notes = FIXME,XXX,TODO

[SIMILARITIES]
# Minimum lines number of a similarity.
min-similarity-lines = 4

# Ignore comments when computing similarities.
ignore-comments = yes

# Ignore docstrings when computing similarities.
ignore-docstrings = yes

# Ignore imports when computing similarities.
ignore-imports = no

[SPELLING]
# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict =

[TYPECHECK]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = contextlib.contextmanager

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members =

[VARIABLES]
# Tells whether we should check for unused import in __init__ files.
init-import = no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx = _+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_

[CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = __init__,__new__,setUp,__post_init__

[DESIGN]
# Maximum number of arguments for function / method
max-args = 8

# Maximum number of attributes for a class (see R0902).
max-attributes = 12

# Maximum number of boolean expressions in a if statement
max-bool-expr = 5

# Maximum number of branch for function / method body
max-branches = 12

# Maximum number of locals for function / method body
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body
max-returns = 6

# Maximum number of statements in function / method body
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 1

[EXCEPTIONS]
# Exceptions that will emit a warning when being caught. Defaults to
# "builtins.Exception"
overgeneral-exceptions = builtins.Exception
